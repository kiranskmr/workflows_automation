variables:
  - group: 'Devops Automation'

trigger:
  branches:
    include:
    - main
  paths:
    include:
      - '.azure/azure-pipelines-testcase.yml'   

jobs:
  - job: UnitTests
    displayName: 'Unit Tests'
    # Trigger unit test upon making a PR against the main branch
    condition: |
      and(
        not(eq(variables['Build.Reason'], 'IndividualCI')),
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['System.PullRequest.TargetBranch'], 'main'),
        not(eq(variables['System.PullRequest.TargetBranch'], 'release'))
      )
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.10'
      inputs:
        versionSpec: 3.10.x


    - script: |
        python -m pip install --upgrade pip
        pip install pytest pyspark databricks-connect
      displayName: 'Install dependencies'

    - script: |
        DATABRICKS_CLUSTER_ID=$(TEST_CLUSTER_ID) pytest --junitxml=$(Build.StagingDirectory)/test.xml
      workingDirectory: 'src'
      displayName: 'Run unit test cases with pytest'
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)


  # - job: IntegrationTests
  #   displayName: 'Integration Tests'
  #   # Integration tests will only run upon  tests successfully passing
  #   dependsOn: UnitTests
  #   condition: succeeded()
  #   pool:
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #   - checkout: self
  #     persistCredentials: true
  #     clean: true
  #     displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

  #   # Install Databricks CLI
  #   - script: |
  #       curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/v0.220.0/install.sh | sh   
  #     displayName: 'Install Databricks CLI'          

  #   # Extract Databricks version to test installation
  #   - script: |
  #       databricks version
  #     displayName: 'Get Databricks CLI version'

  #   - script: |
  #       pip install wheel
  #     displayName: 'Install wheel'

  #   # Validate bundle to be deployed to the staging workspace
  #   - script: |
  #       databricks bundle validate --var="warehouse_id=$(BUNDLE_VAR_warehouse_id),node_type=$(BUNDLE_VAR_node_type)" -t test
  #     displayName: Validate bundle for test deployment target in staging workspace
  #     env:
  #       ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
  #       ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
  #       ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        

  #   # Deploy bundle to staging workspace
  #   - script: |
  #       databricks bundle deploy --var="warehouse_id=$(BUNDLE_VAR_warehouse_id),node_type=$(BUNDLE_VAR_node_type)" -t test
  #     displayName: Deploy bundle to test deployment target in staging workspace
  #     env:
  #       ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
  #       ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
  #       ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        

    
  #   # Run Feature Engineering Workflow for test deployment target in Staging Workspace
  #   - script: |
  #       databricks bundle run write_feature_table_job --var="warehouse_id=$(BUNDLE_VAR_warehouse_id),node_type=$(BUNDLE_VAR_node_type)" -t staging
  #     displayName: Run Feature Engineering Workflow for test deployment target in Staging Workspace
  #     env:
  #       ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
  #       ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
  #       ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        
    

  #   # Run model_training_job defined in bundle in the staging workspace
  #   - script: |
  #       databricks bundle run model_training_job --var="warehouse_id=$(BUNDLE_VAR_warehouse_id),node_type=$(BUNDLE_VAR_node_type)" -t staging
  #     displayName: Run training workflow for test deployment target in staging workspace
  #     env:
  #       ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
  #       ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
  #       ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)

