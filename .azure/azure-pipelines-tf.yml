variables:
  - group: 'Devops Automation'

trigger:
  branches:
    include:
    - main
    - release


stages:
# Run TerraformCI stage upon making a PR against the /ref/head/main branch 
- stage: TerraformCI
  displayName: 'Terraform Plan for workflows_automation'
  # Trigger TerraformCI stage on PR against the default branch, and not on pushes to other branches
  condition: |
    and(
      not(eq(variables['Build.Reason'], 'IndividualCI')),
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], 'main'),
      not(eq(variables['System.PullRequest.TargetBranch'], 'release'))
      )



  jobs:
  - job: StagingTerraformCI
    displayName: 'Staging Terraform init and plan for workflows_automation'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true
   

    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/v0.220.0/install.sh | sh   
      displayName: 'Install Databricks CLI'   
      
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.7.5'
      
    - script: |
        pip install wheel
      displayName: 'Install wheel'   
    - script: |
        python3 setup.py bdist_wheel
      displayName: 'Build whl file'

    # Validate terrafrom code to be deployed to the staging workspace

    - script: terraform -chdir=terraform/environments/test/ init -backend-config="resource_group_name=$(resource_group_name)" -backend-config="storage_account_name=$(storage_account_name)" -backend-config="container_name=$(container_name)" -backend-config="key=test.terraform.tfstate"
      displayName: 'Terraform Init'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/test/ validate 
      displayName: 'Terraform Validate'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/test/ plan -lock=false
      displayName: 'Terraform Plan'
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        TF_VAR_git_url: $(git_url)
      workingDirectory: "$(Build.SourcesDirectory)"







  - job: ProdTerraformCI
    displayName: 'Prod Terraform init and plan for workflows_automation'
    dependsOn: []   # Removes the implicit dependency on previous job and force prodBundleCI job to run in parallel

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

    # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/v0.220.0/install.sh | sh   
      displayName: 'Install Databricks CLI'        

    - script: |
        pip install wheel
      displayName: 'Install wheel'  

    - script: |
        python3 setup.py bdist_wheel
      displayName: 'Build whl file'

    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.7.5'

    # Validate terrafrom code to be deployed to the prod workspace

    - script: terraform -chdir=terraform/environments/prod/ init -backend-config="resource_group_name=$(resource_group_name)" -backend-config="storage_account_name=$(storage_account_name)" -backend-config="container_name=$(container_name)" -backend-config="key=prod.terraform.tfstate"
      displayName: 'Terraform Init'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/prod/  validate
      displayName: 'Terraform Validate'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/prod/ plan -lock=false
      displayName: 'Terraform Plan'
      env:
        ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)
        TF_VAR_git_url: $(git_url)
      workingDirectory: "$(Build.SourcesDirectory)"





# Run StagingTerraformCD stage after successfully merging into the main branch
- stage: StagingTerraformCD
  displayName: 'Staging Terraform deployment for worklow_automation'
  # Trigger deployment of Terraform  when PRs are merged into the main branch

  condition: |
    and(
      eq(variables['Build.SourceBranch'], 'refs/heads/main'),
      not(eq(variables['Build.Reason'], 'PullRequest'))
    )

  jobs:
  - job: StagingTerraformCD
    displayName: 'Terraform Deployment for workflow_automation Staging'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

      # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/v0.220.0/install.sh | sh   
      displayName: 'Install Databricks CLI'          


    - script: |
        pip install wheel
      displayName: 'Install wheel'


    - script: |
        python3 setup.py bdist_wheel
      displayName: 'Build whl file'

    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.7.5'

    - script: databricks fs cp $(Build.Repository.LocalPath)/dist/*.whl dbfs:/Volumes/test/wheel_tf/wheel_volume --overwrite
      displayName: 'Copy to volumes'
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)    


    # Validate terrafrom code to be deployed to the staging workspace

    - script: terraform -chdir=terraform/environments/test/ init -backend-config="resource_group_name=$(resource_group_name)" -backend-config="storage_account_name=$(storage_account_name)" -backend-config="container_name=$(container_name)" -backend-config="key=test.terraform.tfstate"
      displayName: 'Terraform Init'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/test/  validate 
      displayName: 'Terraform Validate'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/test/ plan -lock=false
      displayName: 'Terraform Plan'
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        TF_VAR_git_url: $(git_url)
      workingDirectory: "$(Build.SourcesDirectory)"
        

    # Deploy Terraform  to Staging workspace
    - script: terraform -chdir=terraform/environments/test/  apply -auto-approve
      displayName: 'Terraform Apply'
      workingDirectory: "$(Build.SourcesDirectory)"
      env:
        ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)
        TF_VAR_git_url: $(git_url)








# Run prod Terraform CD stage after successfully merging into the release branch
- stage: prodTerraformCD
  displayName: 'Prod Terraform deployment for workflows_automation'
  # Trigger deployment of Terraform resources when PRs are merged into the release branch
  condition: |
    and(
      eq(variables['Build.SourceBranchName'], 'release'),
      not(eq(variables['Build.Reason'], 'PullRequest'))
    )

  jobs:
  - deployment: prod_deploy
    environment: prod
    workspace:
      clean: all
  - job: prodTerraformCD
    displayName: 'Terraform deployment for workflows_automation prod'

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

      # Install Databricks CLI
    - script: |
        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/v0.220.0/install.sh | sh   
      displayName: 'Install Databricks CLI latest'       

    - script: |
        pip install wheel
      displayName: 'Install wheel'   

    - script: |
        python3 setup.py bdist_wheel
      displayName: 'Build whl file'

    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.7.5'

    - script: databricks fs cp $(Build.Repository.LocalPath)/dist/*.whl dbfs:/Volumes/prod/wheel_tf/wheel_volume --overwrite
      displayName: 'Copy to volumes'
      env:
        ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)    

    # Validate terrafrom code to be deployed to the prod workspace

    - script: terraform -chdir=terraform/environments/prod/ init -backend-config="resource_group_name=$(resource_group_name)" -backend-config="storage_account_name=$(storage_account_name)" -backend-config="container_name=$(container_name)" -backend-config="key=prod.terraform.tfstate"
      displayName: 'Terraform Init'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/prod/  validate
      displayName: 'Terraform Validate'
      workingDirectory: "$(Build.SourcesDirectory)"
    - script: terraform -chdir=terraform/environments/prod/ plan -lock=false
      displayName: 'Terraform Plan'
      env:
        ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)
        TF_VAR_git_url: $(git_url)
      workingDirectory: "$(Build.SourcesDirectory)"
        

    # Deploy Terraform to prod workspace
    - script: terraform -chdir=terraform/environments/prod/  apply -auto-approve
      displayName: 'Terraform Apply'
      workingDirectory: "$(Build.SourcesDirectory)"
      env:
        ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
        ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
        ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)
        TF_VAR_git_url: $(git_url)

