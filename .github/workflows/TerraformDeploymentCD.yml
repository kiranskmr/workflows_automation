
# This workflow validates, deploys, and runs the specified Terraform pipeline
# within a pre-production target named "prod".
name: "Terraform Continuous Deployment"

# Ensure that only a single job or workflow using the same concurrency group
# runs at a time.
concurrency:
  group: tfcd
  cancel-in-progress: true

# Trigger this workflow whenever a pull request is opened against the repo's
# main branch or an existing pull request's head branch is updated.
on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - release

jobs:
  # Used by the "pipeline_update" job to deploy the bundle.
  # Bundle validation is automatically performed as part of this deployment.
  # If validation fails, this workflow fails.
  stagingbuild:
    if: github.ref == 'refs/heads/main'
    name: "Terraform deploy in Test"
    runs-on: ubuntu-latest
    environment: test
    env:
      ARM_CLIENT_ID: ${{ vars.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ vars.TENANT_ID }}
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
      STORAGE_ACCOUNT: ${{ vars.STORAGE_ACCOUNT }}
      CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
      DATABRICKS_HOST: ${{ vars.DATABRICKS_HOST }}
      ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      TF_VAR_git_url: ${{ vars.git_url }}
    steps:
      # Check out this repo, so that this workflow can access it.
      - uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # install the python version needed

      # Download the Databricks CLI.
      # See https://github.com/databricks/setup-cli
      - uses: databricks/setup-cli@main


    # Validate terrafrom code to be deployed to the test workspaces

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3   

      - name: terraform init
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP" -backend-config="key=testtf.terraform.tfstate"
        working-directory: terraform/environments/test/

      - name: terraform fmt
        run: terraform fmt
        working-directory: terraform/environments/test/
      - name: terraform validate
        run: terraform validate
        working-directory: terraform/environments/test/
      - name: terraform plan
        run: terraform plan -lock=false
        working-directory: terraform/environments/test/
      - name: terraform apply
        run: terraform apply -auto-approve -lock=false
        working-directory: terraform/environments/test/
      - run: pip install wheel
        name: "Install Wheel"
      - run: python3 setup.py bdist_wheel
        name: "Build wheel file"
      - run: databricks fs cp ${{ github.workspace }}/dist/*.whl dbfs:/Volumes/test/wheel_tf/wheel_volume --overwrite
        name: "Copy whl to volumes"


  prodbuild:
    if: github.ref == 'refs/heads/release'
    name: "Terraform deploy in Prod"
    runs-on: ubuntu-latest
    environment: prod
    env:
      ARM_CLIENT_ID: ${{ vars.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ vars.TENANT_ID }}
      RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
      STORAGE_ACCOUNT: ${{ vars.STORAGE_ACCOUNT }}
      CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
      DATABRICKS_HOST: ${{ vars.DATABRICKS_HOST }}
      ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      TF_VAR_git_url: ${{ vars.git_url }}
    steps:
      # Check out this repo, so that this workflow can access it.
      - uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # install the python version needed

      # Download the Databricks CLI.
      # See https://github.com/databricks/setup-cli
      - uses: databricks/setup-cli@main


    # Validate terrafrom code to be deployed to the test workspaces

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3   

      - name: terraform init
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP" -backend-config="key=prodtf.terraform.tfstate"
        working-directory: terraform/environments/prod/

      - name: terraform fmt
        run: terraform fmt
        working-directory: terraform/environments/prod/
      - name: terraform validate
        run: terraform validate 
        working-directory: terraform/environments/prod/
      - name: terraform plan
        run: terraform plan -lock=false
        working-directory: terraform/environments/prod/
      - name: terraform apply
        run: terraform apply -auto-approve -lock=false
        working-directory: terraform/environments/prod/
      - run: pip install wheel
        name: "Install Wheel"
      - run: python3 setup.py bdist_wheel
        name: "Build wheel file"
      - run: databricks fs cp ${{ github.workspace }}/dist/*.whl dbfs:/Volumes/prod/wheel_tf/wheel_volume --overwrite
        name: "Copy whl to volumes"






